import { Modal, Form, Button } from 'react-bootstrap'; // React-Bootstrap bile≈üenleri
import axios from 'axios';
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom'; // Y√∂nlendirme i√ßin gerekli
import ModalComponent from "../components/ModalComponent"; // ModalComponent'ƒ± kullanƒ±yoruz
import { Eye, EyeOff, Mail } from "lucide-react";

const RegisterPage = () => {
    const navigate = useNavigate(); // Y√∂nlendirme i≈ülemi i√ßin useNavigate hook'u
    const [showPassword, setShowPassword] = useState(false);
    const [password, setPassword] = useState("");
    const [confirmPassword, setConfirmPassword] = useState("");
    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&.,])[A-Za-z\d@$!%*?&.,]{8,}$/;
    const [formData, setFormData] = useState({
        username: '',
        surname: '',
        password: '',
        email: '',
    });

    // Modal durumu ve mesajlarƒ±
    const [modalData, setModalData] = useState({
        isOpen: false,
        message: '',
        type: '', // 'success' veya 'error'
    });

    const closeModal = () => {
        setModalData({ isOpen: false, message: "", type: "" });
        // Modal kapandƒ±ktan sonra y√∂nlendirme i≈ülemi
        // Eƒüer modal kapatƒ±lƒ±rken message "enter" ise, y√∂nlendirme yap
        if (modalData.type === "warning") {
            navigate("/register"); // ƒ∞stediƒüiniz sayfaya y√∂nlendirin
        }
        if (modalData.type === "error") {
            navigate("/register"); // ƒ∞stediƒüiniz sayfaya y√∂nlendirin
        }

        if (modalData.type === "success") {
            navigate("/login"); // ƒ∞stediƒüiniz sayfaya y√∂nlendirin
        }

    };

    // Form alanlarƒ±nƒ± kontrol etme
    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData({ ...formData, [name]: value });
    };

 


    const handleSubmit = async (e) => {
        e.preventDefault();

        // üî¥ ≈ûifreler e≈üle≈üiyor mu kontrol√º
        if (formData.password !== formData.confirmPassword) {
            setModalData({ isOpen: true, message: "≈ûifreler uyu≈ümuyor!", type: "error" });
            return;
        }

        // üî¥ ≈ûifre regex kontrol√º
        if (!passwordRegex.test(formData.password)) {
            setModalData({
                isOpen: true,
                message: "≈ûifreniz en az 8 karakter, bir b√ºy√ºk harf, bir k√º√ß√ºk harf, bir rakam ve bir √∂zel karakter i√ßermelidir!",
                type: "error"
            });
            return;
        }
        try {
            const response = await axios.post("http://localhost:8080/auth/register", formData);
            console.log("Backend yanƒ±tƒ±:", response.data);

            const userData = response.data.data; // Kullanƒ±cƒ± bilgileri
            setModalData({
                isOpen: true,
                message: `Ho≈ügeldiniz, ${userData.username} ${userData.surname}`,
                type: "success",
            });
        } catch (error) {
            let errorMessage = "Bilinmeyen bir hata olu≈ütu. L√ºtfen tekrar deneyin.";

            if (error.response) {
                // Backend'den gelen hata
                console.error("Backend hatasƒ±:", error.response.data);
                errorMessage =
                    error.response.data.data === "500"
                        ? "Bir hata olu≈ütu. L√ºtfen tekrar deneyin."
                        : `Bo≈ü alanlarƒ± doldurun.\n${error.response.data.message}`;
            } else if (error.request) {
                // ƒ∞stek g√∂nderildi ama yanƒ±t alƒ±namadƒ±
                console.error("ƒ∞stek hatasƒ±:", error.request);
                errorMessage = "Sunucuya baƒülanƒ±lamadƒ±. L√ºtfen internet baƒülantƒ±nƒ±zƒ± kontrol edin.";
            } else {
                // Diƒüer hata durumlarƒ±
                console.error("Hata:", error.message);
            }

            setModalData({
                isOpen: true,
                message: errorMessage,
                type: "error",
            });
        }
    };

    const togglePasswordVisibility = () => {
        setShowPassword((prev) => !prev);
    };


    return (
        < main className="main">
            <div className="form-container">
                <form className="form" onSubmit={handleSubmit} >
                    <h4 className="form-title">Hesap Olu≈ütur</h4>
                    <div>
                        <div className="input-wrapper">
                            <input className='input-field'
                                type="text"
                                name="username"
                                value={formData.username}
                                onChange={handleInputChange}
                                placeholder="Kullanƒ±cƒ± Adƒ±"
                                required
                            />

                        </div>


                        <div className="input-wrapper">
                            <input className='input-field'
                                type="text"
                                name="surname"
                                value={formData.surname}
                                onChange={handleInputChange}
                                placeholder="Soyadƒ±nƒ±zƒ± Girin"
                                required
                            />

                        </div>


                        <div className="input-wrapper">
                            <input
                                className="input-field"
                                type={showPassword ? "text" : "password"}
                                name="password" // üîπ name ekledik
                                value={formData.password} // üîπ formData'dan alƒ±nƒ±yor
                                onChange={handleInputChange} // üîπ G√ºncellenmi≈ü fonksiyon
                                placeholder="Yeni ≈ûifre"
                                required
                            />
                            <button className="password-toggle" tabIndex="-1" type="button" onClick={togglePasswordVisibility}>
                                {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                            </button>
                        </div>

                        <div className="input-wrapper">
                            <input
                                className="input-field"
                                type={showPassword ? "text" : "password"}
                                name="confirmPassword" // üîπ name ekledik
                                value={formData.confirmPassword} // üîπ formData'dan alƒ±nƒ±yor
                                onChange={handleInputChange} // üîπ G√ºncellenmi≈ü fonksiyon
                                placeholder="≈ûifreyi Onayla"
                                required
                            />
                            <button className="password-toggle" tabIndex="-1" type="button" onClick={togglePasswordVisibility}>
                                {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                            </button>
                        </div>




                        <div className="input-wrapper">
                            <input className='input-field'
                                type="email"
                                name="email"
                                value={formData.email}
                                onChange={handleInputChange}
                                placeholder="Email Adresinizi Girin"
                                required
                            />
                            <Mail className="mail-toggle" />
                        </div>

                    </div>
                    <button className='login-button' type="submit" style={{ maxWidth: "200px" }}>Hesap Olu≈ütur</button>


                </form>

                {/* Modal Bile≈üeni */}
                <ModalComponent
                    isOpen={modalData.isOpen}
                    onRequestClose={closeModal}
                    message={modalData.message}
                    type={modalData.type}
                />
            </div>
        </main >
    );
};

export default RegisterPage;
